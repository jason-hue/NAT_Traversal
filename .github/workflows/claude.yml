name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"
          
          # Custom instructions for NAT traversal project
          custom_instructions: |
            You are reviewing a Rust NAT traversal project with the following architecture:
            - common/: Shared protocol definitions and configuration using serde
            - server/: NAT traversal server with TLS support using tokio and rustls
            - client/: Client with GUI (egui) and CLI modes
            - platform/: Cross-platform service integration
            
            Key technologies:
            - tokio for async runtime
            - rustls for TLS encryption (pure Rust, no OpenSSL)
            - egui for GUI framework
            - serde for JSON/TOML serialization
            - tracing for structured logging
            
            Focus on:
            1. Async/await patterns and tokio best practices
            2. TLS security and certificate handling
            3. Error handling with custom NatError types
            4. Memory safety and ownership patterns
            5. Cross-platform compatibility (Linux/Windows)
            6. GUI responsiveness and async integration
            7. Network security and input validation
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

